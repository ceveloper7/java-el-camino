Objetos
=======
3 Caracteristicas claves de los objetos
    1. Comportamiento -> que se puede hacer con el objeto o que metodos se pueden aplicar de el
    2. Estado -> como reacciona el objeto cuando se invocan sus metodos
    3. identidad -> como se distingue el objeto de otros objetos que pueden tener el mismo estado y comportamiento

Al disenar un sistema orientado a objetos el primer paso es identificar las clases y luego agregar los metodos
a cada clase.

Relacion entre clases
=====================
Dependencia -> USA UN. Una clase depende de otra clase si sus metodos usan o manipulan objetoso de esa clase.
               La dependencia genera acoplamiento entre clases
Agregacion -> TIENE UN. La relacion "tiene un" es facil de entender. Por ejemplo el objeto Pedido contiene
              objetos Producto. Agregacion significa que los objetos de la clase A contienen a los objetos
              de la clase B
Herencia -> ES UN. La herencia expresa la relacion entre una clase mas concreta y una mas general.
            Por ejemplo: la clase PedidoRapido hereda de la clase Pedido. La clase concreta PedidoRapido
            tiene metodos especiales para el manejo de prioridades y un metodo diferente para calcular
            los gastos de envio, pero sus otros metodos como agregar articulo y facturar se heredan de
            la clase Pedido.

Diagrama UML
    La clase PedidoRapido hereda de la clase Pedido
    La clase Pedido depende de la clase Cuenta
    La clase Item es una agregado en la clase Pedido

Variables de Objeto
===================
Las variables de objeto NO CONTIENEN objetos sino almacenan la referencia o direccion de memoria donde
esta creado el objeto.

Cuando usar static methods:
==========================
1. Cuando un metodo no necesita acceder al estado del objeto porque todos los parametros que necesita
   estan provistos como parametros explicitos.
2. Cuando un metodo solo necesita acceder a campos static de la clase.

Metodos con parametros
======================
    Paso por valor: el metodo obtiene solo el valor que el llamante ofrece
    Paso por referencia: el metodo obtiene la ubicacion de la variable  que el llamante provee. Por lo que
                         un metodo puede modificar el valor almacenado en una variable pasado por referencia
                         pero no en una pasada por valor.
    Java siempre emplea la llamada por valor. lo que significa que los metodos reciben una copia de todos los
    argumentos. en particular los metodos no pueden modificar el contenido de ninguna variable en la
    llamada de metodo.

Tipos de parametros de metodo
=============================
1. tipos primitivos (byte, short, int, boolean, char, float, double, long)
2. referencia a objetos (String, Array, etc...)

En resumen
==========
1. Un metodo no puede modificar un parametro de un tipo primitivo
2. Un metodo puede cambiar el estado de un parametro objeto
3. Un metodo no puede hacer un parametro object referencie a un nuevo objeto

Que pasa en detalle cuando un constructor es llamado
====================================================
1. Si la primera sentencia del constructor llama a un segundo constructor, entonces el segundo constructor
   se ejecuta con los argumentos provistos.
2. En otro caso
        2.1 Todos los campos de instancia son inicializados a su valor por defecto (0, false, null)
        2.2 Todos los inicializadores de campos y bloques de inicializacion son ejecutados. en el orden
            en el que ellos aparecen en la declaracion de la clase.
3. El cuerpo del constructor es ejecutado.

Record
======
Es una forma espcial de una clase, cuyo estado es inmutable y leible por el publico. Cada record tiene
tres metodos definidos automaticamente: hasCode, toString, equals.
Un record no puede incluir campos de instancia.
Un record como una clase puede tener campos y metodos static

Tip: Utilice record en lugar de class para datos inmutables que es completamente representado por un
     conjunto de variables. Utilice class si los datos son mutables, o si la representacion puede
     cambiar en el tiempo. Los record son mas eficientes y seguros en programas concurrentes.

