Subclasses Constructor
======================
Cuando un objeto Subclase es construido sin una invocacion explicita al constructor de la super clase.
La super clase debe tener un constructor sin argumentos. El constructor de la super clase es invocado
antes de la construccion de la subclase.

Polimorfismo
============
La regla IS A (ES UN) esta regla nos ayuda a saber si cada objeto de la subclase es un objeto de la superclase.
Por ejemplo cada Manager es un Employee por lo tanto la clase Manager es una subclase de la clase Employee.
Sin embargo lo opusto no es verdad, cada objeto de la clase Employee no es un Manager.

La regla del principio de sustitucion no dice que podemos usar un objeto de la subclase si el programa
espera un objeto de la superclase.

El polimorfismo en java lo podemos ver en el hecho de que un objeto de la clase Empployee puede hacer
referencia a un objeto de la clase Employee o un objeto de la subclase Employee como Manager, Executive
o Secretary.

Evitando la herencia: Clases y metodos final
============================================
Al declarar una clase como final evitar que se pueda extender o heredar dicha clase.
Cuando una clase se declara final automaticamente sus metodos son final pero no son final
las variables de instancia. Un metodo final hace que dicho metodo no pueda ser modificado por alguna subclase.

La unica buena razon para hacer de una clase o metodo final es que queremos asegurarnos de que su semantica
no se puede cambiar en una subclase.

Casting
=======
Solo podemos aplicar casting dentro de la jerarquia de herencia
Podemos usar instanceof para verificar antes del casting de una superclase a una subclase

Receta para escribir un metodo equals()
=======================================
1. Nombrar el parametro explicito otherObject luego, necesitamos aplicar cast a otra variable que
   deberiamos llamar other.
2. Validar si this resulta ser identico a otherObject: if(this==otherObject) return true;
   Es mucho mas barato verificar la identidad que comparar los campos.
3. Validar si otherObject es null y retornar false: if(otherObject==null) false;
4. Comparar las clase this y otherObject
   if(getClass() != otherObject.getClass()) return false;
   ClassName other = (ClassName)otherObject;
5. Ahora, compare los campos, como lo necesite su nocion de igualdad. utilice == para campos primitivos,
   utilice Objects.equals() para campos tipo object, retorne true si todos los campos coinciden, retorne
   false en otro caso.
   return field1 == other.field1 && Objects.equals(field2, other.field2) && ...
Si redefinimos equals en la subclase, incluya llamar super.equals(other)

ArrayList
=========
Insertar y eliminar elemento de un ArrayList no es muy eficiente. Si vamos a almacenar muchos elementos y
vamos a insertar y eliminar con mucha frecuencia en el medio de una coleccion, deberiamos considerar el
uso de una LinkedList.

Wrapper objects
===============
Cada uno de los tipos primitivos tiene su contra parte en clase como Byte, Short, Integer, Float, Double
Long, Character, Boolean, las primeras seis heredan de su superclase comun Number.

Las wrapper clases son inmutables por lo que una vez construidas no se pueden cambiar su valor y tambien
las wrapper clasess son final por lo que no se pueden heredar.
var list = new ArrayList<int>(); // ERROR
var list = new ArrayList<Integer>(); //OK

Nota: ArrayList<Integer>() es menos eficiente que int[]. utilice ArrayList<Integer>() para pequenas
colecciones.

Autoboxing: autoboxing ocurre cuando un valor primitivo lo convertimos a objeto, como en el sgte ejemplo
==========
ejemplo de autoboxing: list.add(3); esto equivale a list.add(Integer.valueOf(3));

UnBoxing: ocurre cuando un objeto Integer lo asignamos a un valor primitivo int.
=========
ejemplo de unboxing: int n = list.get(0);
el compilador lo convierte a: n = list.get(0).intValue();

Diferencia entre el valor primitivo y su tipo wrapper
=====================================================
como sabemos el operador == aplicado a objetos wrapper verifica si los objetos poseen las misma direccion
de memoria. por ejemplo:
Integer a = 1000;
Integer b = 1000;
a == b // false;
a.equals(b); // true

El boxing y unboxing una cortesia del compilar y no de la JVM

VarArgs methods (metodo con numero variable de argumentos)
==========================================================
public PrintStream printf(String fmt, Object... args)
las elipsis ... denotan que el metodo puede recibir un numero arbitrario de objetos.
el metodo printf recibe dos parametros uno String y otro Object[] por lo tanto
Object... es igual a Object[]

Podemos definir nuestros propios metodos con argumentos variables:
public static double max(double... values)
para llamar a la funcion: double m = max(5, 6.7, -8)
el compilador pasa un new Double[]{5, 6.7, -8} al metodo max

Clases Abstractas (Abstract class)
==================================
Las clases abstractas pueden contener metodos concretos. todos los campos y metodos comunes se deberian
mover hacia una super clase.
Si una clase es declarada como abstract no puede ser instanciada, es decir, no se pueden crear
objetos concretos de dicha clase.
Podemos crear variable de objeto de una clase abstracta, pero dicha variable debe hacer referencia a
un objeto de una clase no abstracta. por ejemplo:
Person p = new Student("Fernando");

Sealed class
============
Una sealed class controla que clases pueden heredar de ella.
Ejemplo de una declaracion sealed class

public abstract sealed class JSONVale
    permits JSONArray, JSONNumber, JSONString, JSONBoolean, JSONObject, JSONNull
{}
Sealed classes permiten un modelado del dominio de negocio mas exacto.
Las clases permitidas de una sealed class deben ser accesibles. ellas no pueden ser clases privadas
que estan anidadas a otras clases.
Las subclasses permitidas deben ser publicas, ellas deben estar en el mismo paquete de la sealed class

Nota: Una sealed class puede ser declarada sin permits, entonces todas sus subclasses directas deben estar
      declaradas dentro del mismo archivo.

Una subclase de una sealed class debe especificar si es sealed, final o esta abierta a subclassing, en el
ultimo caso, debe estar declarada como non-sealed.

Pattern Matching Using instanceof
=================================
El operador instanceof nos permite verificar si un objeto tiene un tipo particular. La forma mas conveniente
de instanceof es declarar una variable de type matching. cada sentencia condicional debe establecer el valor
de description.
Por ejemplo:
Employee ee = ...
String description;
if(ee instanceof Executive exec){
    description="Is an Executive";
}
exec.getTitle();
else if(ee instanceof Manager m){
    description="Is an Manager";
}
else{
    description="Is a regular employee";
}
ee.getSalary();

Pattern matching using Switch
=============================
Switch expresion es mas simple que una cadena de if statements. switch expression retorna una valor
que se asigna a la variable description.
Ejemplo:
Employee ee = ...
String description = switch(e){
    case Executive exec -> "An Executive " + ee.getTitle();
    case Manager m -> "A Manager " + m.getTitle();
    default -> "A regular employee"
}

Lo comun en ambos pattern matching es que en estos casos ambos declaran una variable type matched.
Utilizamos dichas variables para acceder a los metodos de las subclases.

Preview Note: Java 21 introduces unnamed variables as a
preview feature. If you don't need the variable in a type pattern, use
an underscore:
case Employee _ -> "A lowly employee"
Until this feature becomes generally available, you can use two
underscores:
case Employee __ -> "A lowly employee"

Si no queremos hacer nada cuando no hay coincidencia con una case, podemos escribir
default: break;

Guards
======
Podemos agregar un condition al pattern matching llamado guard usando el keyword "when"
case Executive exec when exec.getTitle().getLength() >= 20 -> "An Executive with great title"
en el guard expression podemos usar la variable exec que en el pattern se introdujo. Si el guard expression
no se cumple, el caso no es seleccionado y se pasa al siguiente case

Reflexion
=========
Cuando un programa esta en ejecucion el runtime type identification lleva un registro de la clase
a la que cada objeto pertenece.

Para compilar el ejemplo ResourceTest.java
==========================================
1. Nos ubicamos en la raiz del proyecto: /local-projects/intellij/java-core/java-el-camino/src
2. Ejecutamos el comando: javac com/ceva/core1/ch05/resources/ResourceTest.java
3. Creamos un archivo .jar con las clases compiladas y sus resources:
jar cvfe com/ceva/core1/ch05/resources/ResourceTest.jar com/ceva/core1/ch05/resources/ResourceTest  com/ceva/core1/ch05/resources/*.class  com/ceva/core1/ch05/resources/*.gif  com/ceva/core1/ch05/resources/data/*.txt  com/ceva/core1/ch05/corejava/*.txt
4. Ejecutar el archivo: java -jar ResourceTest.jar

en ocasiones puede ser dificil compilar los archivos fuentes debido a las muchas carpetas.
Imaginemos que el ejemplo esta ubicado en la raiz de C:/sample
sample
    external
    resources
        data
        about.gif
        ResourceTest.java
Compilacion
===========
javac resources/ResourceTest.java
jar cvfe ResourceTest.jar resources.ResourceTest resources/*.class resources/*.gif resources/data/*.txt external/*.txt
java -jar ResourceTest.jar



